package com.udsl.processor6502.cpu.execution

import com.udsl.processor6502.cpu.execution.AddressingMode

sealed trait Opcode(val addressingMode: AddressingMode, val mnemonic: String ):
  override def toString: String = s"$mnemonic - $addressingMode - size ${addressingMode.size.bytes} bytes"

case object NULL_Instruction extends Opcode(Unknown, "NULL"):
  override def toString: String = s"$mnemonic - not a real instruction zero bytes"

case class ADC(addressMode: AddressingMode) extends Opcode(addressMode, "ADC")
case class AND(addressMode: AddressingMode) extends Opcode(addressMode, "AND")
case class ASL(addressMode: AddressingMode) extends Opcode(addressMode, "ASL")
case class BCC(addressMode: AddressingMode) extends Opcode(addressMode, "BCC")
case class BCS(addressMode: AddressingMode) extends Opcode(addressMode, "BCS")
case class BEQ(addressMode: AddressingMode) extends Opcode(addressMode, "BEQ")
case class BIT(addressMode: AddressingMode) extends Opcode(addressMode, "BIT")
case class BRK(addressMode: AddressingMode) extends Opcode(addressMode, "BRK")
case class BMI(addressMode: AddressingMode) extends Opcode(addressMode, "BMI")
case class BNE(addressMode: AddressingMode) extends Opcode(addressMode, "BNE")
case class BPL(addressMode: AddressingMode) extends Opcode(addressMode, "BPL")
case class BVC(addressMode: AddressingMode) extends Opcode(addressMode, "BVC")
case class BVS(addressMode: AddressingMode) extends Opcode(addressMode, "BVS")
case class CLC(addressMode: AddressingMode) extends Opcode(addressMode, "CLC")
case class CLD(addressMode: AddressingMode) extends Opcode(addressMode, "CLD")
case class CLI(addressMode: AddressingMode) extends Opcode(addressMode, "CLI")
case class CLV(addressMode: AddressingMode) extends Opcode(addressMode, "CLV")
case class CMP(addressMode: AddressingMode) extends Opcode(addressMode, "CMP")
case class CPX(addressMode: AddressingMode) extends Opcode(addressMode, "CPX")
case class CPY(addressMode: AddressingMode) extends Opcode(addressMode, "CPY")
case class DEC(addressMode: AddressingMode) extends Opcode(addressMode, "DEC")
case class DEX(addressMode: AddressingMode) extends Opcode(addressMode, "DEX")
case class DEY(addressMode: AddressingMode) extends Opcode(addressMode, "DEY")
case class EOR(addressMode: AddressingMode) extends Opcode(addressMode, "EOR")
case class INC(addressMode: AddressingMode) extends Opcode(addressMode, "INC")
case class INX(addressMode: AddressingMode) extends Opcode(addressMode, "INX")
case class INY(addressMode: AddressingMode) extends Opcode(addressMode, "INY")
case class JMP(addressMode: AddressingMode) extends Opcode(addressMode, "JMP")
case class JSR(addressMode: AddressingMode) extends Opcode(addressMode, "JSR")
case class LDA(addressMode: AddressingMode) extends Opcode(addressMode, "LDA")
case class LDX(addressMode: AddressingMode) extends Opcode(addressMode, "LDX")
case class LDY(addressMode: AddressingMode) extends Opcode(addressMode, "LDY")
case class LSR(addressMode: AddressingMode) extends Opcode(addressMode, "LSR")
case class ORA(addressMode: AddressingMode) extends Opcode(addressMode, "ORA")
case class NOP(addressMode: AddressingMode) extends Opcode(addressMode, "NOP")
case class PLA(addressMode: AddressingMode) extends Opcode(addressMode, "PLA")
case class PHA(addressMode: AddressingMode) extends Opcode(addressMode, "PHA")
case class PHP(addressMode: AddressingMode) extends Opcode(addressMode, "PHP")
case class PLP(addressMode: AddressingMode) extends Opcode(addressMode, "PLP")
case class ROL(addressMode: AddressingMode) extends Opcode(addressMode, "ROL")
case class ROR(addressMode: AddressingMode) extends Opcode(addressMode, "ROR")
case class RTI(addressMode: AddressingMode) extends Opcode(addressMode, "RTI")
case class RTS(addressMode: AddressingMode) extends Opcode(addressMode, "RTS")
case class SBC(addressMode: AddressingMode) extends Opcode(addressMode, "SBC")
case class SEC(addressMode: AddressingMode) extends Opcode(addressMode, "SEC")
case class SED(addressMode: AddressingMode) extends Opcode(addressMode, "SED")
case class SEI(addressMode: AddressingMode) extends Opcode(addressMode, "SEI")
case class STA(addressMode: AddressingMode) extends Opcode(addressMode, "STA")
case class STX(addressMode: AddressingMode) extends Opcode(addressMode, "STX")
case class STY(addressMode: AddressingMode) extends Opcode(addressMode, "STY")
case class TAX(addressMode: AddressingMode) extends Opcode(addressMode, "TAX")
case class TAY(addressMode: AddressingMode) extends Opcode(addressMode, "TAY")
case class TSX(addressMode: AddressingMode) extends Opcode(addressMode, "TSX")
case class TXA(addressMode: AddressingMode) extends Opcode(addressMode, "TXA")
case class TXS(addressMode: AddressingMode) extends Opcode(addressMode, "TXS")
case class TYA(addressMode: AddressingMode) extends Opcode(addressMode, "TYA")


case object Illegal extends Opcode(Invalid, "Illegal bits 1 and 2")


object Opcode:
  val aaaMask: Int = Integer.parseInt("11100000", 2)
  val bbbMask: Int = Integer.parseInt("00011100", 2)
  val ccMask: Int = Integer.parseInt("00000011", 2)


  def apply(byte: Int): Opcode =
    decode(byte)

  def decode(byte: Int): Opcode =
    decode((byte & aaaMask) >> 5, (byte & bbbMask) >> 2, byte & ccMask)

  private def decode( a: Int, b: Int, c: Int): Opcode =
      (c, a, b) match
        case (0, 0, 0) => BRK(Implied)
        case (0, 0, 2) => PHP(Implied)
        case (0, 0, 4) => BPL(Relative)
        case (0, 0, 6) => CLC(Implied)

        case (0, 1, 0) => JSR(Absolute)
        case (0, 1, 1) => BIT(ZeroPage)
        case (0, 1, 2) => PLP(Implied)
        case (0, 1, 3) => BIT(Absolute)
        case (0, 1, 4) => BMI(Relative)
        case (0, 1, 6) => SEC(Implied)

        case (0, 2, 0) => RTI(Implied)
        case (0, 2, 2) => PHA(Implied)
        case (0, 2, 3) => JMP(Absolute)
        case (0, 2, 4) => BVC(Relative)
        case (0, 2, 6) => CLI(Implied)

        case (0, 3, 0) => RTS(Absolute)
        case (0, 3, 2) => PLA(Implied)
        case (0, 3, 3) => JMP(Indirect)
        case (0, 3, 4) => BVS(Relative)
        case (0, 3, 6) => SEI(Implied)

        case (0, 4, 1) => STY(ZeroPage)
        case (0, 4, 2) => DEY(Implied)
        case (0, 4, 3) => STY(Absolute)
        case (0, 4, 4) => BCC(Relative)
        case (0, 4, 5) => STY(ZeroPageX)
        case (0, 4, 6) => TYA(Implied)

        case (0, 5, 0) => LDY(Immediate)
        case (0, 5, 1) => LDY(ZeroPage)
        case (0, 5, 2) => TAY(Implied)
        case (0, 5, 3) => LDY(Absolute)
        case (0, 5, 4) => BCS(Relative)
        case (0, 5, 5) => LDY(ZeroPageX)
        case (0, 5, 6) => CLV(Implied)
        case (0, 5, 7) => LDY(AbsoluteX)

        case (0, 6, 0) => CPY(Immediate)
        case (0, 6, 1) => CPY(ZeroPage)
        case (0, 6, 2) => INY(Implied)
        case (0, 6, 3) => CPY(Absolute)
        case (0, 6, 4) => BNE(Relative)
        case (0, 6, 6) => CLD(Implied)

        case (0, 7, 0) => CPX(Immediate)
        case (0, 7, 1) => CPX(ZeroPage)
        case (0, 7, 2) => INX(Implied)
        case (0, 7, 3) => CPX(Absolute)
        case (0, 7, 4) => BEQ(Relative)
        case (0, 7, 6) => SED(Implied)

        case (1, 0, 0) => ORA(IndirectX)
        case (1, 0, 1) => ORA(ZeroPage)
        case (1, 0, 2) => ORA(Immediate)
        case (1, 0, 3) => ORA(Absolute)
        case (1, 0, 4) => ORA(IndirectY)
        case (1, 0, 5) => ORA(ZeroPageX)
        case (1, 0, 6) => ORA(AbsoluteY)
        case (1, 0, 7) => ORA(AbsoluteX)

        case (1, 1, 0) => AND(IndirectX)
        case (1, 1, 1) => AND(ZeroPage)
        case (1, 1, 2) => AND(Immediate)
        case (1, 1, 3) => AND(Absolute)
        case (1, 1, 4) => AND(IndirectY)
        case (1, 1, 5) => AND(ZeroPageX)
        case (1, 1, 6) => AND(AbsoluteY)
        case (1, 1, 7) => AND(AbsoluteX)

        case (1, 2, 0) => EOR(IndirectX)
        case (1, 2, 1) => EOR(ZeroPage)
        case (1, 2, 2) => EOR(Immediate)
        case (1, 2, 3) => EOR(Absolute)
        case (1, 2, 4) => EOR(IndirectY)
        case (1, 2, 5) => EOR(ZeroPageX)
        case (1, 2, 6) => EOR(AbsoluteY)
        case (1, 2, 7) => EOR(AbsoluteX)

        case (1, 3, 0) => ADC(IndirectX)
        case (1, 3, 1) => ADC(ZeroPage)
        case (1, 3, 2) => ADC(Immediate)
        case (1, 3, 3) => ADC(Absolute)
        case (1, 3, 4) => ADC(IndirectY)
        case (1, 3, 5) => ADC(ZeroPageX)
        case (1, 3, 6) => ADC(AbsoluteY)
        case (1, 3, 7) => ADC(AbsoluteX)

        case (1, 4, 0) => STA(IndirectX)
        case (1, 4, 1) => STA(ZeroPage)
        case (1, 4, 3) => STA(Absolute)
        case (1, 4, 4) => STA(IndirectY)
        case (1, 4, 5) => STA(ZeroPageX)
        case (1, 4, 6) => STA(AbsoluteY)
        case (1, 4, 7) => STA(AbsoluteX)

        case (1, 5, 0) => LDA(IndirectX)
        case (1, 5, 1) => LDA(ZeroPage)
        case (1, 5, 2) => LDA(Immediate)
        case (1, 5, 3) => LDA(Absolute)
        case (1, 5, 4) => LDA(IndirectY)
        case (1, 5, 5) => LDA(ZeroPageX)
        case (1, 5, 6) => LDA(AbsoluteY)
        case (1, 5, 7) => LDA(AbsoluteX)

        case (1, 6, 0) => CMP(IndirectX)
        case (1, 6, 1) => CMP(ZeroPage)
        case (1, 6, 2) => CMP(Immediate)
        case (1, 6, 3) => CMP(Absolute)
        case (1, 6, 4) => CMP(IndirectY)
        case (1, 6, 5) => CMP(ZeroPageX)
        case (1, 6, 6) => CMP(AbsoluteY)
        case (1, 6, 7) => CMP(AbsoluteX)

        case (1, 7, 0) => SBC(IndirectX)
        case (1, 7, 1) => SBC(ZeroPage)
        case (1, 7, 2) => SBC(Immediate)
        case (1, 7, 3) => SBC(Absolute)
        case (1, 7, 4) => SBC(IndirectY)
        case (1, 7, 5) => SBC(ZeroPageX)
        case (1, 7, 6) => SBC(AbsoluteY)
        case (1, 7, 7) => SBC(AbsoluteX)

        case (2, 0, 1) => ASL(ZeroPage)
        case (2, 0, 2) => ASL(Accumulator)
        case (2, 0, 3) => ASL(Absolute)
        case (2, 0, 5) => ASL(ZeroPageX)
        case (2, 0, 7) => ASL(AbsoluteX)

        case (2, 1, 1) => ROL(ZeroPage)
        case (2, 1, 2) => ROL(Accumulator)
        case (2, 1, 3) => ROL(Absolute)
        case (2, 1, 5) => ROL(ZeroPageX)
        case (2, 1, 7) => ROL(AbsoluteX)

        case (2, 2, 1) => LSR(ZeroPage)
        case (2, 2, 2) => LSR(Accumulator)
        case (2, 2, 3) => LSR(Absolute)
        case (2, 2, 5) => LSR(ZeroPageX)
        case (2, 2, 7) => LSR(AbsoluteX)

        case (2, 3, 1) => ROR(ZeroPage)
        case (2, 3, 2) => ROR(Accumulator)
        case (2, 3, 3) => ROR(Absolute)
        case (2, 3, 5) => ROR(ZeroPageX)
        case (2, 3, 7) => ROR(AbsoluteX)

        case (2, 4, 1) => STX(ZeroPage)
        case (2, 4, 2) => TXA(Implied)
        case (2, 4, 3) => STX(Absolute)
        case (2, 4, 5) => STX(ZeroPageY)
        case (2, 4, 6) => TXS(Implied)

        case (2, 5, 0) => LDX(Immediate)
        case (2, 5, 1) => LDX(ZeroPage)
        case (2, 5, 2) => TAX(Implied)
        case (2, 5, 3) => LDX(Absolute)
        case (2, 5, 5) => LDX(ZeroPageY)
        case (2, 5, 6) => TSX(Implied)
        case (2, 5, 7) => LDX(AbsoluteY)

        case (2, 6, 1) => DEC(ZeroPage)
        case (2, 6, 2) => DEX(Implied)
        case (2, 6, 3) => DEC(Absolute)
        case (2, 6, 5) => DEC(ZeroPageX)
        case (2, 6, 7) => DEC(AbsoluteX)

        case (2, 7, 1) => INC(ZeroPage)
        case (2, 7, 2) => NOP(Implied)
        case (2, 7, 3) => INC(Absolute)
        case (2, 7, 5) => INC(ZeroPageX)
        case (2, 7, 7) => INC(AbsoluteX)

        case (_, _, _) => Illegal

